package baseFunction

import (
	"math"
)

//高斯函数模型
//gauss 是高斯分布函数，用查表法得出概率，输入变量和高斯分布系数，返回概率分布
func gauss(X float64, meanValue float64, variance float64) float64 {
	var normalizeX = (X - meanValue) / variance
	var normP = [][]float64{
		{0.50000000, 0.50398936, 0.50797831, 0.51196647, 0.51595344, 0.51993881, 0.52392218, 0.52790317, 0.53188137, 0.53585639},
		{0.53982784, 0.54379531, 0.54775843, 0.55171679, 0.55567000, 0.55961769, 0.56355946, 0.56749493, 0.57142372, 0.57534543},
		{0.57925971, 0.58316616, 0.58706442, 0.59095412, 0.59483487, 0.59870633, 0.60256811, 0.60641987, 0.61026125, 0.61409188},
		{0.61791142, 0.62171952, 0.62551583, 0.62930002, 0.63307174, 0.63683065, 0.64057643, 0.64430875, 0.64802729, 0.65173173},
		{0.65542174, 0.65909703, 0.66275727, 0.66640218, 0.67003145, 0.67364478, 0.67724189, 0.68082249, 0.68438630, 0.68793305},
		{0.69146246, 0.69497427, 0.69846821, 0.70194403, 0.70540148, 0.70884031, 0.71226028, 0.71566115, 0.71904269, 0.72240468},
		{0.72574688, 0.72906910, 0.73237111, 0.73565271, 0.73891370, 0.74215389, 0.74537309, 0.74857110, 0.75174777, 0.75490291},
		{0.75803635, 0.76114793, 0.76423750, 0.76730491, 0.77035000, 0.77337265, 0.77637271, 0.77935005, 0.78230456, 0.78523612},
		{0.78814460, 0.79102991, 0.79389195, 0.79673061, 0.79954581, 0.80233746, 0.80510548, 0.80784980, 0.81057035, 0.81326706},
		{0.81593987, 0.81858875, 0.82121362, 0.82381446, 0.82639122, 0.82894387, 0.83147239, 0.83397675, 0.83645694, 0.83891294},
		{0.84134475, 0.84375235, 0.84613577, 0.84849500, 0.85083005, 0.85314094, 0.85542770, 0.85769035, 0.85992891, 0.86214343},
		{0.86433394, 0.86650049, 0.86864312, 0.87076189, 0.87285685, 0.87492806, 0.87697560, 0.87899952, 0.88099989, 0.88297680},
		{0.88493033, 0.88686055, 0.88876756, 0.89065145, 0.89251230, 0.89435023, 0.89616532, 0.89795768, 0.89972743, 0.90147467},
		{0.90319952, 0.90490208, 0.90658249, 0.90824086, 0.90987733, 0.91149201, 0.91308504, 0.91465655, 0.91620668, 0.91773556},
		{0.91924334, 0.92073016, 0.92219616, 0.92364149, 0.92506630, 0.92647074, 0.92785496, 0.92921912, 0.93056338, 0.93188788},
		{0.93319280, 0.93447829, 0.93574451, 0.93699164, 0.93821982, 0.93942924, 0.94062006, 0.94179244, 0.94294657, 0.94408260},
		{0.94520071, 0.94630107, 0.94738386, 0.94844925, 0.94949742, 0.95052853, 0.95154277, 0.95254032, 0.95352134, 0.95448602},
		{0.95543454, 0.95636706, 0.95728378, 0.95818486, 0.95907049, 0.95994084, 0.96079610, 0.96163643, 0.96246202, 0.96327304},
		{0.96406968, 0.96485211, 0.96562050, 0.96637503, 0.96711588, 0.96784323, 0.96855724, 0.96925809, 0.96994596, 0.97062102},
		{0.97128344, 0.97193339, 0.97257105, 0.97319658, 0.97381016, 0.97441194, 0.97500210, 0.97558081, 0.97614824, 0.97670453},
		{0.97724987, 0.97778441, 0.97830831, 0.97882173, 0.97932484, 0.97981778, 0.98030073, 0.98077383, 0.98123723, 0.98169110},
		{0.98213558, 0.98257082, 0.98299698, 0.98341419, 0.98382262, 0.98422239, 0.98461367, 0.98499658, 0.98537127, 0.98573788},
		{0.98609655, 0.98644742, 0.98679062, 0.98712628, 0.98745454, 0.98777553, 0.98808937, 0.98839621, 0.98869616, 0.98898934},
		{0.98927589, 0.98955592, 0.98982956, 0.99009692, 0.99035813, 0.99061329, 0.99086253, 0.99110596, 0.99134368, 0.99157581},
		{0.99180246, 0.99202374, 0.99223975, 0.99245059, 0.99265637, 0.99285719, 0.99305315, 0.99324435, 0.99343088, 0.99361285},
		{0.99379033, 0.99396344, 0.99413226, 0.99429687, 0.99445738, 0.99461385, 0.99476639, 0.99491507, 0.99505998, 0.99520120},
		{0.99533881, 0.99547289, 0.99560351, 0.99573076, 0.99585470, 0.99597541, 0.99609297, 0.99620744, 0.99631889, 0.99642740},
		{0.99653303, 0.99663584, 0.99673590, 0.99683328, 0.99692804, 0.99702024, 0.99710993, 0.99719719, 0.99728206, 0.99736460},
		{0.99744487, 0.99752293, 0.99759882, 0.99767260, 0.99774432, 0.99781404, 0.99788179, 0.99794764, 0.99801162, 0.99807379},
		{0.99813419, 0.99819286, 0.99824984, 0.99830519, 0.99835894, 0.99841113, 0.99846180, 0.99851100, 0.99855876, 0.99860511},
		{0.99865010, 0.99869376, 0.99873613, 0.99877723, 0.99881711, 0.99885579, 0.99889332, 0.99892971, 0.99896500, 0.99899922},
		{0.99903240, 0.99906456, 0.99909574, 0.99912597, 0.99915526, 0.99918365, 0.99921115, 0.99923781, 0.99926362, 0.99928864},
		{0.99931286, 0.99933633, 0.99935905, 0.99938105, 0.99940235, 0.99942297, 0.99944294, 0.99946226, 0.99948096, 0.99949906},
		{0.99951658, 0.99953352, 0.99954991, 0.99956577, 0.99958111, 0.99959594, 0.99961029, 0.99962416, 0.99963757, 0.99965054},
		{0.99966307, 0.99967519, 0.99968689, 0.99969821, 0.99970914, 0.99971971, 0.99972991, 0.99973977, 0.99974929, 0.99975849},
		{0.99976737, 0.99977595, 0.99978423, 0.99979222, 0.99979994, 0.99980738, 0.99981457, 0.99982151, 0.99982820, 0.99983466},
		{0.99984089, 0.99984690, 0.99985270, 0.99985829, 0.99986368, 0.99986888, 0.99987389, 0.99987872, 0.99988338, 0.99988787},
		{0.99989220, 0.99989637, 0.99990039, 0.99990426, 0.99990799, 0.99991158, 0.99991504, 0.99991838, 0.99992159, 0.99992468},
		{0.99992765, 0.99993052, 0.99993327, 0.99993593, 0.99993848, 0.99994094, 0.99994331, 0.99994558, 0.99994777, 0.99994988},
		{0.99995190, 0.99995385, 0.99995573, 0.99995753, 0.99995926, 0.99996092, 0.99996253, 0.99996406, 0.99996554, 0.99996696},
		{0.99996833, 0.99996964, 0.99997090, 0.99997211, 0.99997327, 0.99997439, 0.99997546, 0.99997649, 0.99997748, 0.99997843},
		{0.99997934, 0.99998022, 0.99998106, 0.99998186, 0.99998263, 0.99998338, 0.99998409, 0.99998477, 0.99998542, 0.99998605},
		{0.99998665, 0.99998723, 0.99998778, 0.99998832, 0.99998882, 0.99998931, 0.99998978, 0.99999023, 0.99999066, 0.99999107},
		{0.99999146, 0.99999184, 0.99999220, 0.99999254, 0.99999288, 0.99999319, 0.99999350, 0.99999379, 0.99999407, 0.99999433},
		{0.99999459, 0.99999483, 0.99999506, 0.99999529, 0.99999550, 0.99999571, 0.99999590, 0.99999609, 0.99999627, 0.99999644},
		{0.99999660, 0.99999676, 0.99999691, 0.99999705, 0.99999719, 0.99999732, 0.99999744, 0.99999756, 0.99999768, 0.99999778},
		{0.99999789, 0.99999799, 0.99999808, 0.99999817, 0.99999826, 0.99999834, 0.99999842, 0.99999849, 0.99999857, 0.99999863},
		{0.99999870, 0.99999876, 0.99999882, 0.99999888, 0.99999893, 0.99999898, 0.99999903, 0.99999908, 0.99999912, 0.99999917},
		{0.99999921, 0.99999925, 0.99999928, 0.99999932, 0.99999935, 0.99999938, 0.99999941, 0.99999944, 0.99999947, 0.99999950},
		{0.99999952, 0.99999954, 0.99999957, 0.99999959, 0.99999961, 0.99999963, 0.99999965, 0.99999967, 0.99999968, 0.99999970},
	}
	if normalizeX > 0 {
		var i = int(math.Floor(normalizeX / 0.1))
		var j = int(math.Floor(normalizeX/0.01)) - i*10
		if i>9{i=9}
		if j>49{j=49}
		return normP[i][j]
	}
	normalizeX = -normalizeX
	var i = int(math.Floor(normalizeX / 0.1))
	var j = int(math.Floor(normalizeX/0.01)) - i*10
	if i>9{i=9}
	if j>49{j=49}
	return 1 - normP[i][j]
}






func LineSensorModel(sensor []float64, GaussCoefficient [][]float64) [2]float64 {
	if len(sensor) != len(GaussCoefficient) {
		panic("观测量数量和概率分布系数数量不对应")
	}
	var sensorP = [2]float64{1, 0}
	for i, element := range sensor {
		sensorP[0] *= gauss(element, GaussCoefficient[i][0], GaussCoefficient[i][1])
	}
	sensorP[1] = 1 - sensorP[0] //这里粗暴地得到两个不同状态量条件下的获得对应观测量的概率，有待修改
	return sensorP
	//计算传感器模型概率
}

func TransSensorModel(sensor []float64, GaussCoefficient [][]float64) [2]float64 {
	if len(sensor) != len(GaussCoefficient) {
		panic("观测量数量和概率分布系数数量不对应")
	}
	var sensorP = [2]float64{1, 0}
	for i, element := range sensor {
		sensorP[0] *= gauss(element, GaussCoefficient[i][0], GaussCoefficient[i][1])
	}
	sensorP[1] = 1 - sensorP[0] //这里粗暴地得到两个不同状态量条件下的获得对应观测量的概率，有待修改
	return sensorP
	//计算传感器模型概率
}

